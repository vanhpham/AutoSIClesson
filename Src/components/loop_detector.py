# -*- coding: utf-8 -*-
"""
Module ph√°t hi·ªán v√† x·ª≠ l√Ω l·∫∑p v√¥ h·∫°n
"""
from typing import Dict, Any, Callable


class LoopDetector:
    """Class ph√°t hi·ªán v√† x·ª≠ l√Ω l·∫∑p v√¥ h·∫°n"""
    
    def __init__(self, max_repeats: int = 3):
        self.loop_detection = {
            'last_action': None,
            'repeat_count': 0,
            'max_repeats': max_repeats,
            'auto_restart_count': 0
        }
        self.on_auto_restart_callback: Callable = None
        self.on_status_update_callback: Callable = None
    
    def set_auto_restart_callback(self, callback: Callable):
        """Thi·∫øt l·∫≠p callback khi c·∫ßn auto restart"""
        self.on_auto_restart_callback = callback
    
    def set_status_update_callback(self, callback: Callable):
        """Thi·∫øt l·∫≠p callback c·∫≠p nh·∫≠t tr·∫°ng th√°i"""
        self.on_status_update_callback = callback

    def check_loop_detection(self, action: str) -> bool:
        """
        Ki·ªÉm tra v√† x·ª≠ l√Ω l·∫∑p v√¥ h·∫°n
        
        Args:
            action: T√™n h√†nh ƒë·ªông ƒëang th·ª±c hi·ªán
            
        Returns:
            bool: True n·∫øu c·∫ßn auto restart, False n·∫øu kh√¥ng
        """
        is_play_button_action = "play button" in action.lower()

        if is_play_button_action:
            # B·ªè qua ho√†n to√†n c√°c action li√™n quan ƒë·∫øn play button
            if self.on_status_update_callback:
                self.on_status_update_callback("B√¨nh th∆∞·ªùng (Play Button - B·ªè qua ki·ªÉm tra l·∫∑p)", "green")
            return False

        if self.loop_detection['last_action'] == action:
            self.loop_detection['repeat_count'] += 1

            if self.on_status_update_callback:
                status_color = "orange"
                status = f"L·∫∑p {self.loop_detection['repeat_count']}/{self.loop_detection['max_repeats']}"
                self.on_status_update_callback(status, status_color)

            if self.loop_detection['repeat_count'] >= self.loop_detection['max_repeats']:
                print(f"üîÑ Ph√°t hi·ªán l·∫∑p '{action}' qu√° {self.loop_detection['max_repeats']} l·∫ßn! T·ª± ƒë·ªông restart...")
                self.loop_detection['auto_restart_count'] += 1

                if self.on_status_update_callback:
                    self.on_status_update_callback("Auto restarting...", "red")

                # Reset loop detection sau khi trigger restart
                self.loop_detection['repeat_count'] = 0
                self.loop_detection['last_action'] = None

                if self.on_auto_restart_callback:
                    self.on_auto_restart_callback()

                return True
        else:
            # H√†nh ƒë·ªông m·ªõi, kh√¥ng ph·∫£i l·∫∑p c·ªßa h√†nh ƒë·ªông tr∆∞·ªõc ƒë√≥
            self.loop_detection['last_action'] = action
            self.loop_detection['repeat_count'] = 1

            if self.on_status_update_callback:
                self.on_status_update_callback("B√¨nh th∆∞·ªùng", "green")

        return False

    def reset_auto_restart_count(self):
        """Reset b·ªô ƒë·∫øm auto restart"""
        self.loop_detection['auto_restart_count'] = 0
        self.loop_detection['repeat_count'] = 0
        self.loop_detection['last_action'] = None
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        if self.on_status_update_callback:
            self.on_status_update_callback("ƒê√£ reset", "green")
    
    def get_auto_restart_count(self) -> int:
        """L·∫•y s·ªë l·∫ßn auto restart"""
        return self.loop_detection['auto_restart_count']
    
    def get_loop_status(self) -> Dict[str, Any]:
        """L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa loop detector"""
        return self.loop_detection.copy()